package com.dgsoft.house.owner.model;
// Generated Oct 11, 2014 3:13:15 PM by Hibernate Tools 4.0.0

import org.hibernate.annotations.GenericGenerator;

import java.util.HashSet;
import java.util.Set;
import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

/**
 * MakeCard generated by hbm2java
 */
@Entity
@Table(name = "MAKE_CARD", catalog = "HOUSE_OWNER_RECORD")
public class MakeCard implements java.io.Serializable {

            // 预告, 预抵 , 产权 , 抵押, 在抵, 共有, 预售许可,转移预告,转移预抵
    public enum CardType{
                NOTICE,NOTICE_MORTGAGE,OWNER_RSHIP,MORTGAGE_CARD,PROJECT_MORTGAGE,POOL_RSHIP,PROJECT_RSHIP,NOTICE_DIVERT,NOTICE_DIVERT_MORTGAGE;

            }
	private String id;
	private OwnerBusiness ownerBusiness;
	private CardType type;
	private String number;
    private boolean enable;
    //private Set<BusinessHouse> businessHouses = new HashSet<BusinessHouse>(0);

    private CardInfo cardInfo;
    private ProjectCard projectCard;
    private Financial financial;

    private PowerPerson powerPerson;


    public MakeCard() {

    }


    public MakeCard(CardType type) {
        this.type = type;
        //this.enable=enable;
    }

    public MakeCard(CardType type ,String number) {
        this.type = type;
        this.number = number;
	}

    public MakeCard(OwnerBusiness ownerBusiness,CardType type,String number){
        this.ownerBusiness = ownerBusiness;
        this.type = type;
        this.number = number;
    }

    @OneToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)
    @PrimaryKeyJoinColumn
    public CardInfo getCardInfo() {
        return cardInfo;
    }

    public void setCardInfo(CardInfo cardInfo) {
        this.cardInfo = cardInfo;
    }

	@Id
	@Column(name = "ID", unique = true, nullable = false, length = 32)
	@NotNull
	@Size(max = 32)
    @GeneratedValue(generator = "system-uuid")
    @GenericGenerator(name = "system-uuid", strategy = "uuid.hex")
	public String getId() {
		return this.id;
	}

	public void setId(String id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "BUSINESS_ID", nullable = false)
	@NotNull
	public OwnerBusiness getOwnerBusiness() {
		return this.ownerBusiness;
	}

	public void setOwnerBusiness(OwnerBusiness ownerBusiness) {
		this.ownerBusiness = ownerBusiness;
	}

    @Enumerated(EnumType.STRING)
	@Column(name = "TYPE", nullable = false, length = 20)
	@NotNull
    public CardType getType() {
        return this.type;
    }

    public void setType(CardType type) {
        this.type = type;
    }

	@Column(name = "NUMBER", nullable = false, length = 100)
	@NotNull
	@Size(max = 100)
	public String getNumber() {
		return this.number;
	}

	public void setNumber(String number) {
		this.number = number;
	}

    @OneToOne(fetch = FetchType.LAZY,cascade = CascadeType.ALL)
    @PrimaryKeyJoinColumn
    public ProjectCard getProjectCard() {
        return projectCard;
    }

    public void setProjectCard(ProjectCard projectCard) {
        this.projectCard = projectCard;
    }

    @OneToOne(fetch = FetchType.LAZY, mappedBy = "makeCard")
    public Financial getFinancial() {
        return financial;
    }

    public void setFinancial(Financial financial) {
        this.financial = financial;
    }

    @Column(name="ENABLE", nullable = false)
    public boolean isEnable() {
        return enable;
    }

    public void setEnable(boolean enable) {
        this.enable = enable;
    }


    @OneToOne(fetch = FetchType.LAZY, mappedBy = "makeCard")
    public PowerPerson getPowerPerson() {
        return powerPerson;
    }

    public void setPowerPerson(PowerPerson powerPerson) {
        this.powerPerson = powerPerson;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        MakeCard makeCard = (MakeCard) o;

        if (id != null ? !id.equals(makeCard.id) : makeCard.id != null) return false;

        return true;
    }

    @Override
    public int hashCode() {
        return id != null ? id.hashCode() : 0;
    }
}

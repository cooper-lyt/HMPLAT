package com.dgsoft.house.model;
// Generated Jul 12, 2013 11:32:23 AM by Hibernate Tools 4.0.0

import com.google.common.collect.Iterators;
import org.hibernate.annotations.GenericGenerator;

import java.util.*;
import javax.persistence.*;
import javax.swing.tree.TreeNode;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

/**
 * ProvinceCity generated by hbm2java
 */
@Entity
@Table(name = "PROVINCE_CITY", catalog = "HOUSE_INFO")
public class ProvinceCity implements java.io.Serializable,TreeNode {

	private String id;
	private String name;
	private String memo;
	private Set<District> districts = new HashSet<District>(0);

	public ProvinceCity() {
	}

	public ProvinceCity(String id) {
		this.id = id;
	}
	public ProvinceCity(String id, String name, String memo,
			Set<District> districts) {
		this.id = id;
		this.name = name;
		this.memo = memo;
		this.districts = districts;
	}

	@Id
	@Column(name = "ID", unique = true, nullable = false, length = 32)
	@NotNull
    @GeneratedValue(generator = "paymentableGenerator")
    @GenericGenerator(name = "paymentableGenerator",strategy = "uuid")
	@Size(max = 32)
	public String getId() {
		return this.id;
	}

	public void setId(String id) {
		this.id = id;
	}

	@Column(name = "NAME", length = 100)
	@Size(max = 100)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "MEMO", length = 200)
	@Size(max = 200)
	public String getMemo() {
		return this.memo;
	}

	public void setMemo(String memo) {
		this.memo = memo;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "provinceCity")
	public Set<District> getDistricts() {
		return this.districts;
	}

	public void setDistricts(Set<District> districts) {
		this.districts = districts;
	}


    @Transient
    public List<District> getDistrictList(){
        return new ArrayList<District>(getDistricts());
    }


    @Override
    @Transient
    public TreeNode getChildAt(int childIndex) {
        return getDistrictList().get(childIndex);
    }

    @Override
    @Transient
    public int getChildCount() {
        return getDistricts().size();
    }

    @Override
    @Transient
    public TreeNode getParent() {
        return null;
    }

    @Override
    @Transient
    public int getIndex(TreeNode node) {
        return getDistrictList().indexOf(node);
    }

    @Override
    @Transient
    public boolean getAllowsChildren() {
        return true;
    }

    @Override
    @Transient
    public boolean isLeaf() {
        return getDistricts().isEmpty();
    }

    @Override
    @Transient
    public Enumeration children() {
        return Iterators.asEnumeration(getDistricts().iterator());
    }

}
